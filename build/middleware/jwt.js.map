{"version":3,"sources":["../../src/middleware/jwt.js"],"names":["generateToken","secret","role","id","email","token","jwt","sign","expiresIn","verifyToken","decoded","verify","error","Error"],"mappings":";;;;;;;;;AAAA;;AAEO,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,OAAgBC,MAAhB,EAAwBC,IAAxB,EAAiC;AAAA,MAA9BC,EAA8B,QAA9BA,EAA8B;AAAA,MAA1BC,KAA0B,QAA1BA,KAA0B;;AAC1D,MAAMC,KAAK,GAAGC,yBAAIC,IAAJ,CAAS;AACnBJ,IAAAA,EAAE,EAAFA,EADmB;AAEnBC,IAAAA,KAAK,EAALA,KAFmB;AAGnBF,IAAAA,IAAI,EAAJA;AAHmB,GAAT,EAIXD,MAJW,EAIH;AACPO,IAAAA,SAAS,EAAE;AADJ,GAJG,CAAd;;AAOA,SAAOH,KAAP;AACH,CATM;;;;AAWA,IAAMI,WAAW,GAAG,SAAdA,WAAc,CAACJ,KAAD,EAAQJ,MAAR,EAAmB;AAC1C,MAAI;AACA,QAAMS,OAAO,GAAGJ,yBAAIK,MAAJ,CAAWN,KAAX,EAAkBJ,MAAlB,CAAhB;;AACA,WAAOS,OAAP;AACH,GAHD,CAGE,OAAOE,KAAP,EAAc;AACZ,UAAM,IAAIC,KAAJ,CAAU,eAAV,CAAN;AACH;AACJ,CAPM","sourcesContent":["import jwt from 'jsonwebtoken';\r\n\r\nexport const generateToken = ({ id, email }, secret, role) => {\r\n    const token = jwt.sign({\r\n        id,\r\n        email,\r\n        role\r\n    }, secret, {\r\n        expiresIn: '24h'\r\n    })\r\n    return token\r\n}\r\n\r\nexport const verifyToken = (token, secret) => {\r\n    try {\r\n        const decoded = jwt.verify(token, secret)\r\n        return decoded\r\n    } catch (error) {\r\n        throw new Error(\"invalid token\")\r\n    }\r\n}\r\n"],"file":"jwt.js"}