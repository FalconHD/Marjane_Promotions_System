{"version":3,"sources":["../../src/routes/adminCenterRoutes.js"],"names":["router","get","isAdCenter","req","res","connection","console","log","getRepository","find","error","admins","json","id","params","findOne","where","users","post","next","body","email","password","admin","adminCenter","save","message","name","center","category","managerRayon","manager","tokensData","headers","authorization","split","process","env","JWT_CENTER_SECRET","logMsg","logs","target","status","isValid","token","data"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAGA,IAAMA,MAAM,GAAG,sBAAf;;AAGAA,MAAM,CAACC,GAAP,CAAW,MAAX,EAAmBC,sBAAnB;AAAA,2FAA+B,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACrBC,YAAAA,UADqB,GACR,6BADQ;AAG3BC,YAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AAH2B;AAAA,mBAINA,UAAU,CAC1BG,aADgB,CACF,cADE,EAEhBC,IAFgB,YAGV,UAAAC,KAAK,EAAI;AACZJ,cAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACH,aALgB,CAJM;;AAAA;AAIrBC,YAAAA,MAJqB;AAU3BP,YAAAA,GAAG,CAACQ,IAAJ,CAASD,MAAT;;AAV2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA/B;;AAAA;AAAA;AAAA;AAAA;AAaAX,MAAM,CAACC,GAAP,CAAW,MAAX;AAAA,4FAAmB,kBAAOE,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACTC,YAAAA,UADS,GACI,6BADJ;AAETQ,YAAAA,EAFS,GAEJV,GAAG,CAACW,MAAJ,CAAWD,EAFP;AAAA;AAAA,mBAGKR,UAAU,CAACG,aAAX,CAAyB,cAAzB,EAAyCO,OAAzC,CAAiD;AACjEC,cAAAA,KAAK,EAAE;AACHH,gBAAAA,EAAE,EAAFA;AADG;AAD0D,aAAjD,CAHL;;AAAA;AAGTI,YAAAA,KAHS;AAQfb,YAAAA,GAAG,CAACQ,IAAJ,CAASK,KAAT;;AARe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AAAA;AAAA;AAAA;AAAA;AAWAjB,MAAM,CAACkB,IAAP,CAAY,MAAZ;AAAA,4FAAoB,kBAAOf,GAAP,EAAYC,GAAZ,EAAiBe,IAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACVd,YAAAA,UADU,GACG,6BADH;AAAA,wBAEYF,GAAG,CAACiB,IAFhB,EAERC,KAFQ,aAERA,KAFQ,EAEDC,QAFC,aAEDA,QAFC;AAGZC,YAAAA,KAHY,GAGJ,IAAIC,mBAAJ,EAHI;AAIhBD,YAAAA,KAAK,CAACF,KAAN,GAAcA,KAAd;AAJgB;AAAA,mBAKO,8BAAaC,QAAb,CALP;;AAAA;AAKhBC,YAAAA,KAAK,CAACD,QALU;AAAA;AAAA,mBAMFjB,UAAU,CAACG,aAAX,CAAyB,cAAzB,EAAyCiB,IAAzC,CAA8CF,KAA9C,WAA2D,UAAAb,KAAK,EAAI;AAC9EJ,cAAAA,OAAO,CAACC,GAAR,CAAYG,KAAK,CAACgB,OAAlB;AACH,aAFa,CANE;;AAAA;AAMhBH,YAAAA,KANgB;AAUhBnB,YAAAA,GAAG,CAACQ,IAAJ,CAASW,KAAT;;AAVgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApB;;AAAA;AAAA;AAAA;AAAA;AAeAvB,MAAM,CAACkB,IAAP,CAAY,YAAZ,EAAyBhB,sBAAzB;AAAA,4FAAqC,kBAAOC,GAAP,EAAYC,GAAZ,EAAiBe,IAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACV,mCADU;;AAAA;AAC3BG,YAAAA,QAD2B;AAE3BjB,YAAAA,UAF2B,GAEd,6BAFc;AAAA,yBAGUF,GAAG,CAACiB,IAHd,EAGzBO,IAHyB,cAGzBA,IAHyB,EAGlBN,KAHkB,cAGlBA,KAHkB,EAGVO,MAHU,cAGVA,MAHU,EAGFC,QAHE,cAGFA,QAHE;AAI7BC,YAAAA,YAJ6B,GAId,IAAIC,eAAJ,EAJc;AAKjCD,YAAAA,YAAY,CAACH,IAAb,GAAoBA,IAApB;AACAG,YAAAA,YAAY,CAACT,KAAb,GAAqBA,KAArB;AANiC;AAAA,mBAOH,8BAAaC,QAAb,CAPG;;AAAA;AAOjCQ,YAAAA,YAAY,CAACR,QAPoB;AAQjCQ,YAAAA,YAAY,CAACF,MAAb,GAAsBA,MAAtB;AACAE,YAAAA,YAAY,CAACD,QAAb,GAAwBA,QAAxB,CATiC,CAWjC;;AACA,uCAAUR,KAAV,EAAiBC,QAAjB;AAZiC;AAAA,mBAcZjB,UAAU,CAACG,aAAX,CAAyB,SAAzB,EAAoCiB,IAApC,CAAyCK,YAAzC,WAA6D,UAAApB,KAAK,EAAI;AACvFJ,cAAAA,OAAO,CAACC,GAAR,CAAYG,KAAK,CAACgB,OAAlB;AAGH,aAJoB,CAdY;;AAAA;AAcjCI,YAAAA,YAdiC;AAmBjCxB,YAAAA,OAAO,CAACC,GAAR,CAAYuB,YAAZ,EAnBiC,CAqBjC;;AACME,YAAAA,UAtB2B,GAsBd,6BAAY7B,GAAG,CAAC8B,OAAJ,CAAYC,aAAZ,CAA0BC,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAAZ,EAAqDC,OAAO,CAACC,GAAR,CAAYC,iBAAjE,CAtBc;AAuBjChC,YAAAA,OAAO,CAACC,GAAR,CAAYyB,UAAZ;AACIO,YAAAA,MAxB6B,GAwBpB,IAAIC,YAAJ,EAxBoB;AAyBjCD,YAAAA,MAAM,CAACb,OAAP,4BAAmCM,UAAU,CAACnB,EAA9C,uCAA6EiB,YAAY,CAACjB,EAA1F;AACA0B,YAAAA,MAAM,CAACE,MAAP,GAAgBT,UAAU,CAACnB,EAA3B;AACA0B,YAAAA,MAAM,CAACG,MAAP,GAAgB,SAAhB;AA3BiC;AAAA,mBA4BlBrC,UAAU,CAACG,aAAX,CAAyB,MAAzB,EAAiCiB,IAAjC,CAAsCc,MAAtC,WAAoD,UAAA7B,KAAK,EAAI;AACxEJ,cAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACH,aAFc,CA5BkB;;AAAA;AA4BjC6B,YAAAA,MA5BiC;AA+BjC,uCAAUA,MAAV;AACAnC,YAAAA,GAAG,CAACQ,IAAJ,CAAS;AACLc,cAAAA,OAAO,EAAE;AADJ,aAAT;;AAhCiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArC;;AAAA;AAAA;AAAA;AAAA;AAyCA1B,MAAM,CAACkB,IAAP,CAAY,QAAZ;AAAA,4FAAsB,kBAAOf,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AACZC,YAAAA,UADY,GACC,6BADD;AAAA,yBAEUF,GAAG,CAACiB,IAFd,EAEVC,KAFU,cAEVA,KAFU,EAEHC,QAFG,cAEHA,QAFG;AAAA;AAAA,mBAGEjB,UAAU,CAACG,aAAX,CAAyB,cAAzB,EAAyCO,OAAzC,CAAiD;AACjEC,cAAAA,KAAK,EAAE;AACHK,gBAAAA,KAAK,EAALA;AADG;AAD0D,aAAjD,CAHF;;AAAA;AAGZE,YAAAA,KAHY;;AAAA,iBAQdA,KARc;AAAA;AAAA;AAAA;;AAAA;AAAA,mBASQ,+BAAcD,QAAd,EAAwBC,KAAK,CAACD,QAA9B,CATR;;AAAA;AASRqB,YAAAA,OATQ;;AAUd,gBAAIA,OAAJ,EAAa;AACHC,cAAAA,KADG,GACK,+BAAcrB,KAAd,EAAqBa,OAAO,CAACC,GAAR,CAAYC,iBAAjC,EAAoD,cAApD,CADL;AAETlC,cAAAA,GAAG,CAACQ,IAAJ,CAAS;AACLiC,gBAAAA,IAAI,EAAEtB,KADD;AAELqB,gBAAAA,KAAK,EAALA;AAFK,eAAT;AAIH,aAND,MAMO;AACHxC,cAAAA,GAAG,CAACQ,IAAJ,CAAS;AACLc,gBAAAA,OAAO,EAAE;AADJ,eAAT;AAGH;;AApBa;AAAA;;AAAA;AAsBdtB,YAAAA,GAAG,CAACQ,IAAJ,CAAS;AACLc,cAAAA,OAAO,EAAE;AADJ,aAAT;;AAtBc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { getConnection } from \"typeorm\";\r\nimport { Router } from \"express\"\r\nimport { adminCenter, manager ,logs } from \"../models\";\r\nimport { hashPassword, checkPassword, generateToken, isAdCenter, generatePassword, sendEmail, verifyToken, localLogs } from \"../middleware\";\r\n\r\n\r\nconst router = Router();\r\n\r\n\r\nrouter.get('/all', isAdCenter, async (req, res) => {\r\n    const connection = getConnection()\r\n\r\n    console.log(connection);\r\n    const admins = await connection\r\n        .getRepository(\"admin_center\")\r\n        .find()\r\n        .catch(error => {\r\n            console.log(error);\r\n        })\r\n    res.json(admins)\r\n})\r\n\r\nrouter.get('/:id', async (req, res) => {\r\n    const connection = getConnection()\r\n    const id = req.params.id\r\n    const users = await connection.getRepository(\"admin_center\").findOne({\r\n        where: {\r\n            id\r\n        }\r\n    })\r\n    res.json(users)\r\n})\r\n\r\nrouter.post('/add', async (req, res, next) => {\r\n    const connection = getConnection()\r\n    const { email, password } = req.body\r\n    let admin = new adminCenter();\r\n    admin.email = email;\r\n    admin.password = await hashPassword(password);\r\n    admin = await connection.getRepository(\"admin_center\").save(admin).catch(error => {\r\n        console.log(error.message);\r\n    })\r\n\r\n    res.json(admin)\r\n\r\n\r\n})\r\n\r\nrouter.post('/addManger',isAdCenter, async (req, res, next) => {\r\n    const password = await generatePassword();\r\n    const connection = getConnection()\r\n    const { name , email  ,center ,category} = req.body\r\n    let managerRayon = new manager();\r\n    managerRayon.name = name\r\n    managerRayon.email = email;\r\n    managerRayon.password = await hashPassword(password);\r\n    managerRayon.center = center\r\n    managerRayon.category = category\r\n\r\n    //Send Email \r\n    sendEmail(email, password); \r\n\r\n    managerRayon = await connection.getRepository(\"manager\").save(managerRayon).catch(error => {\r\n        console.log(error.message);\r\n\r\n    \r\n    })\r\n    console.log(managerRayon);\r\n\r\n    //create log\r\n    const tokensData = verifyToken(req.headers.authorization.split(\" \")[1], process.env.JWT_CENTER_SECRET)\r\n    console.log(tokensData);\r\n    let logMsg = new logs();\r\n    logMsg.message = ` Admin Center :${tokensData.id} create an manger Center: ${managerRayon.id} `;\r\n    logMsg.target = tokensData.id;\r\n    logMsg.status = 'created';\r\n    logMsg = await connection.getRepository(\"logs\").save(logMsg).catch(error => {\r\n        console.log(error);\r\n    })\r\n    localLogs(logMsg);\r\n    res.json({\r\n        message: \"manager center added\"\r\n    })\r\n   \r\n\r\n})\r\n\r\n\r\n\r\nrouter.post('/login', async (req, res) => {\r\n    const connection = getConnection()\r\n    const { email, password } = req.body\r\n    const admin = await connection.getRepository(\"admin_center\").findOne({\r\n        where: {\r\n            email\r\n        }\r\n    })\r\n    if (admin) {\r\n        const isValid = await checkPassword(password, admin.password)\r\n        if (isValid) {\r\n            const token = generateToken(admin, process.env.JWT_CENTER_SECRET, \"admin_center\")\r\n            res.json({\r\n                data: admin,\r\n                token\r\n            })\r\n        } else {\r\n            res.json({\r\n                message: \"Invalid password\"\r\n            })\r\n        }\r\n    } else {\r\n        res.json({\r\n            message: \"Invalid email\"\r\n        })\r\n    }\r\n})\r\n\r\n\r\n\r\n\r\nexport { router as adminCenter }"],"file":"adminCenterRoutes.js"}