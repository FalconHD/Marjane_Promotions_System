{"version":3,"sources":["../../src/routes/logsRoutes.js"],"names":["router","get","isSuper","req","res","next","connection","getRepository","find","logs","json"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAGA,IAAMA,MAAM,GAAG,sBAAf;;AAGAA,MAAM,CAACC,GAAP,CAAW,MAAX,EAAmBC,mBAAnB;AAAA,2FAA4B,iBAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEdC,YAAAA,UAFc,GAED,6BAFC;AAAA;AAAA,mBAGDA,UAAU,CAACC,aAAX,CAAyB,MAAzB,EAAiCC,IAAjC,EAHC;;AAAA;AAGdC,YAAAA,IAHc;AAIpBL,YAAAA,GAAG,CAACM,IAAJ,CAASD,IAAT;AAJoB;AAAA;;AAAA;AAAA;AAAA;AAMpBJ,YAAAA,IAAI,aAAJ;;AANoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA5B;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { getConnection } from \"typeorm\";\r\nimport { Router } from \"express\"\r\nimport { isSuper } from \"../middleware\";\r\n\r\n\r\nconst router = Router();\r\n\r\n\r\nrouter.get('/all', isSuper, async (req, res, next) => {\r\n    try {\r\n        const connection = getConnection()\r\n        const logs = await connection.getRepository(\"logs\").find()\r\n        res.json(logs)\r\n    } catch (error) {\r\n        next(error)\r\n    }\r\n})\r\n\r\nexport { router as logs }"],"file":"logsRoutes.js"}