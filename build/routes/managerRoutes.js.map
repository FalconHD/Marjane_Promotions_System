{"version":3,"sources":["../../src/routes/managerRoutes.js"],"names":["router","get","isManager","isMorning","req","res","next","getcategory","headers","authorization","split","process","env","JWT_MANAGER_SECRET","connection","getRepository","findOne","where","id","relations","manager","start","Date","toISOString","end","find","product","category","adminCenter","center","createdAt","promotion","json","post","body","email","password","isValid","token","data","message"],"mappings":"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","sourcesContent":["import { Between, getConnection, MoreThanOrEqual } from \"typeorm\";\r\nimport { Router } from \"express\"\r\nimport { manager } from \"../models\";\r\nimport { isMorning, checkPassword, generateToken, isAdCenter, isManager, verifyToken } from \"../middleware\";\r\n\r\n\r\n\r\nconst router = Router();\r\n//get all promotion by category\r\n// router.get('/promotion', async (req, res, next) => {\r\n//     try {\r\n//         const  idManager   = verifyToken(req.headers.authorization.split(\" \")[1], process.env.JWT_MANAGER_SECRET);\r\n//         console.log(idManager);\r\n\r\n//         const connection = getConnection()\r\n//         const getManager = await connection.getRepository(\"manager\").find({relations: ['category'],\r\n//             id :idManager.id\r\n//         })\r\n//         console.log(getManager.categoryId);\r\n//         const promotion = await connection\r\n//             .getRepository(\"promotion\")\r\n//             // .find({relations: ['product','category']})\r\n//             .createQueryBuilder(\"promotion\")\r\n//             .leftJoinAndSelect(\"promotion.product\",\"product\")\r\n//             .leftJoinAndSelect(\"product.category\",\"category\")\r\n//             .where('category.id = :categoryId',{categoryId:\"2abbab78-9e90-40ed-a881-d19fa96d1c45\"})\r\n//             .getMany();\r\n\r\n//             console.log(promotion);\r\n//         res.json(promotion)\r\n//     } catch (error) {\r\n//         next(error)\r\n//     }\r\n// })\r\n\r\n//get all promotion by category\r\nrouter.get('/promotion', isManager, isMorning, async (req, res, next) => {\r\n    try {\r\n        const getcategory = verifyToken(req.headers.authorization.split(\" \")[1], process.env.JWT_MANAGER_SECRET);\r\n        const connection = getConnection()\r\n        const manager = await connection.getRepository(\"manager\").findOne({\r\n            where: {\r\n                id: getcategory.id\r\n            },\r\n            relations: ['category', 'center', 'center.adminCenter']\r\n        })\r\n\r\n        const start = `${(new Date()).toISOString().split('T')[0]} 00:00:00`\r\n        const end = `${(new Date()).toISOString().split('T')[0]} 11:59:59`\r\n\r\n        const promotion = await connection\r\n            .getRepository(\"promotion\")\r\n            .find({\r\n                relations: ['product', \"product.category\", \"adminCenter\", \"adminCenter.center\"],\r\n                where: {\r\n                    product: { category: manager.category.id },\r\n                    adminCenter: { id: manager.center.adminCenter.id },\r\n                    createdAt: Between(start, end)\r\n                }\r\n            })\r\n\r\n\r\n\r\n        // //update status the promotion\r\n\r\n        res.json(promotion)\r\n    } catch (error) {\r\n        next(error)\r\n    }\r\n})\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nrouter.post('/login', async (req, res) => {\r\n    const connection = getConnection()\r\n    const { email, password } = req.body\r\n    const manager = await connection.getRepository(\"manager\").findOne({\r\n        where: {\r\n            email\r\n        }\r\n    })\r\n    if (manager) {\r\n        const isValid = await checkPassword(password, manager.password)\r\n        if (isValid) {\r\n            const token = generateToken(manager, process.env.JWT_MANAGER_SECRET, \"manager\")\r\n            res.json({\r\n                data: manager,\r\n                token\r\n            })\r\n        } else {\r\n            res.json({\r\n                message: \"Invalid password\"\r\n            })\r\n        }\r\n    } else {\r\n        res.json({\r\n            message: \"Invalid email\"\r\n        })\r\n    }\r\n})\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport { router as manager }"],"file":"managerRoutes.js"}