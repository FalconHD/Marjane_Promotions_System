{"version":3,"sources":["../../src/routes/promotionRoutes.js"],"names":["router","post","isAdCenter","req","res","next","headers","authorization","split","process","env","JWT_CENTER_SECRET","id","connection","body","pourcentage","product","getRepository","findOne","relations","where","productCategory","Error","promo","promotion","carteFidélité","category","name","adminCenter","status","save","logMsg","logs","message","target","json","put","isManager","params","console","log","createQueryBuilder","update","set","execute","updatePromotion","tokensData","JWT_MANAGER_SECRET","error"],"mappings":"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","sourcesContent":["import { getConnection } from \"typeorm\";\r\nimport { Router } from \"express\"\r\nimport { promotion } from \"../models\";\r\nimport { hashPassword, checkPassword, generateToken, isSuper, isAdCenter, calculateFidelity, verifyToken, localLogs } from \"../middleware\";\r\nimport { logs } from \"../models/Logs\";\r\nimport { isManager } from \"../middleware/profiles\";\r\n\r\n\r\nconst router = Router();\r\n\r\n\r\nrouter.post('/add', isAdCenter, async (req, res, next) => {\r\n    try {\r\n        const { id } = verifyToken(req.headers.authorization.split(\" \")[1], process.env.JWT_CENTER_SECRET);\r\n        const connection = getConnection()\r\n        const { pourcentage, product } = req.body\r\n        const productCategory = await connection.getRepository(\"product\").findOne({\r\n            relations: [\"category\"],\r\n            where: {\r\n                id: product\r\n            }\r\n        })\r\n\r\n        //product not found in database\r\n        if (!productCategory) throw new Error(\"product not found\")\r\n\r\n        let promo = new promotion();\r\n        promo.pourcentage = pourcentage;\r\n        promo.carteFidélité = calculateFidelity(pourcentage, productCategory.category.name);\r\n        promo.adminCenter = id;\r\n        promo.status = \"pending\";\r\n        promo.product = product;\r\n        promo = await connection.getRepository(\"promotion\").save(promo)\r\n\r\n\r\n        //generating logs for the promotion\r\n        let logMsg = new logs();\r\n        logMsg.message = `Admin Center: ${id} || create promotion: ${promo.id} || Product : ${product}`;\r\n        logMsg.target = id;\r\n        logMsg.status = 'created';\r\n        logMsg = await connection.getRepository(\"logs\").save(logMsg)\r\n        res.json({\r\n            message: \"promotion added\"\r\n        })\r\n    } catch (error) {\r\n        next(error)\r\n    }\r\n})\r\n\r\n\r\n// router.get('/all', isManager, async (req, res, next) => {\r\n//     try {\r\n//         const getcategory = verifyToken(req.headers.authorization.split(\" \")[1], process.env.JWT_MANAGER_SECRET);\r\n//         //\r\n\r\n\r\n//         const connection = getConnection()\r\n//         // const category = await connection.getRepository(\"manager\").find({relations: ['category','center']})\r\n\r\n//         const promotion = await connection\r\n//             .getRepository(\"promotion\")\r\n//             // .find({relations: ['product','category']})\r\n//             .createQueryBuilder(\"promotion\")\r\n//             .leftJoinAndSelect(\"promotion.product\", \"product\")\r\n//             .leftJoinAndSelect(\"product.category\", \"category\")\r\n//             // \r\n//             .getMany();\r\n      \r\n\r\n\r\n\r\n//         console.log(promotion);\r\n//         res.json(promotion)\r\n//     } catch (error) {\r\n//         next(error)\r\n//     }\r\n// })\r\n\r\n\r\n\r\nrouter.put('/:id',isManager, async (req, res) => {\r\n    const connection = getConnection()\r\n    const id = req.params.id\r\n    console.log(id);\r\n    let updatePromotion =  await connection\r\n        .createQueryBuilder()\r\n        .update(\"promotion\")\r\n        .set({ status: req.body.status })\r\n        .where(\"id = :id\", { id: id })\r\n        .execute();\r\n          //create log\r\n    const tokensData = verifyToken(req.headers.authorization.split(\" \")[1], process.env.JWT_MANAGER_SECRET)\r\n    console.log(tokensData);\r\n    let logMsg = new logs();\r\n    logMsg.message = ` Manager :${tokensData.id} update status  promotion: ${id} `;\r\n    logMsg.target = tokensData.id;\r\n    logMsg.status = 'created';\r\n    logMsg = await connection.getRepository(\"logs\").save(logMsg).catch(error => {\r\n        console.log(error);\r\n    })\r\n    localLogs(logMsg);\r\n\r\n    res.json(updatePromotion)\r\n})\r\n\r\n\r\n\r\nexport { router as promotion }"],"file":"promotionRoutes.js"}