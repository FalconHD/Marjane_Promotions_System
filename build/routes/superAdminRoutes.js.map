{"version":3,"sources":["../../src/routes/superAdminRoutes.js"],"names":["router","get","req","res","connection","console","log","getRepository","find","error","admins","json","id","params","findOne","where","users","post","body","email","password","admin","superAdmin","save","isSuper","adminCenter","tokensData","headers","authorization","split","process","env","JWT_SUPER_SECRET","logMsg","logs","message","target","status","isValid","token","data","use","next"],"mappings":"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","sourcesContent":["import { getConnection } from \"typeorm\";\r\nimport { Router } from \"express\"\r\nimport { adminCenter, logs, superAdmin } from \"../models\";\r\nimport { hashPassword, checkPassword, generateToken, isSuper, generatePassword, sendEmail, verifyToken, localLogs } from \"../middleware\";\r\n\r\n\r\nconst router = Router();\r\n\r\n\r\nrouter.get('/all', async (req, res) => {\r\n    const connection = getConnection()\r\n    console.log(connection);\r\n    const admins = await connection\r\n        .getRepository(\"super_admin\")\r\n        .find()\r\n        .catch(error => {\r\n            console.log(error);\r\n        })\r\n    res.json(admins)\r\n})\r\n\r\n//alloo\r\nconsole.log(\"test\");\r\n\r\nrouter.get('/:id', async (req, res) => {\r\n    const connection = getConnection()\r\n    const id = req.params.id\r\n    const users = await connection.getRepository(\"super_admin\").findOne({\r\n        where: {\r\n            id\r\n        }\r\n    })\r\n    res.json(users)\r\n})\r\n\r\nrouter.post('/add', async (req, res) => {\r\n    const connection = getConnection()\r\n    const { email, password } = req.body\r\n    let admin = new superAdmin();\r\n    admin.email = email;\r\n    admin.password = await hashPassword(password);\r\n    admin = await connection.getRepository(\"super_admin\").save(admin)\r\n    res.json(admin)\r\n})\r\n\r\nrouter.post('/adCenter', isSuper, async (req, res) => {\r\n    const password = await generatePassword();\r\n    const connection = getConnection()\r\n    const { email } = req.body\r\n    let admin = new adminCenter();\r\n    admin.email = email;\r\n    admin.password = await hashPassword(password);\r\n\r\n    //Send Email \r\n    sendEmail(email, password);\r\n    admin = await connection.getRepository(\"admin_center\").save(admin)\r\n\r\n    //create log\r\n    const tokensData = verifyToken(req.headers.authorization.split(\" \")[1], process.env.JWT_SUPER_SECRET)\r\n    console.log(tokensData);\r\n    let logMsg = new logs();\r\n    logMsg.message = ` ${tokensData.id} create an admin Center: ${admin.id} `;\r\n    logMsg.target = tokensData.id;\r\n    logMsg.status = 'created';\r\n    logMsg = await connection.getRepository(\"logs\").save(logMsg).catch(error => {\r\n        console.log(error);\r\n    })\r\n    localLogs(logMsg);\r\n\r\n    res.json({\r\n        message: \"admin center added\"\r\n    })\r\n})\r\n\r\n\r\nrouter.post('/login', async (req, res) => {\r\n    const connection = getConnection()\r\n    const { email, password } = req.body\r\n    const admin = await connection.getRepository(\"super_admin\").findOne({\r\n        where: {\r\n            email\r\n        }\r\n    })\r\n    if (admin) {\r\n        const isValid = await checkPassword(password, admin.password)\r\n        if (isValid) {\r\n            const token = generateToken(admin, process.env.JWT_SUPER_SECRET, \"super_admin\")\r\n            res.json({\r\n                data: admin,\r\n                token\r\n            })\r\n        } else {\r\n            res.json({\r\n                message: \"Invalid password\"\r\n            })\r\n        }\r\n    } else {\r\n        res.json({\r\n            message: \"Invalid email\"\r\n        })\r\n    }\r\n})\r\n\r\n\r\nrouter.use((req, res, next) => {\r\n    next()\r\n})\r\n\r\nexport { router as superAdmin }"],"file":"superAdminRoutes.js"}